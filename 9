.LC0:
	.string	"error!"
f:
	sub	rsp, 8
	movzx	eax, BYTE PTR [rdi]
	cmp	al, 89            ; 89 = 'Y'
	je	.L3
	jle	.L21
	cmp	al, 110           ; 110 = 'n'
	je	.L6
	cmp	al, 121           ; 121 = 'y'
	jne	.L2
.L3:
	mov	eax, 1            ; 'Y' or 'y'
	add	rsp, 8
	ret                   ; return 1
.L21:
	cmp	al, 78            ; 78 = 'N'
	je	.L6
.L2:
	mov	edi, OFFSET FLAT:.LC0
	call	puts
	xor	edi, edi
	call	exit            ; exit
.L6:
	xor	eax, eax          ; 'N' or 'n'
	add	rsp, 8
	ret                   ; return 0

Decompile:
f(s){
  if (s == 'Y' || s == 'y') {return 1;}
  else if(s == 'N' || s == 'n') {return 0;}
  else {
    puts("error!");
    exit(0);
  }
}
